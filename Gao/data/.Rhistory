plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
# Print the ggplot
print(plot)
return(pi_estimate)
}
# Number of random points to generate
num_points <- 10
# Function to perform Monte Carlo simulation and estimate pi
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
for (i in 1:num_points) {
x <- runif(1, 0, 1)  # Generate a random x-coordinate between 0 and 1
y <- runif(1, 0, 1)  # Generate a random y-coordinate between 0 and 1
# Store the x and y values for plotting
x_values <- c(x_values, x)
y_values <- c(y_values, y)
# Check if the point (x, y) is inside the unit circle
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
}
# Estimate pi using the ratio of points inside the circle to total points
pi_estimate <- 4 * inside_circle / num_points
# Create a data frame for plotting
df <- data.frame(x = x_values, y = y_values)
# Create a ggplot scatter plot
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
# Print the ggplot
print(plot)
return(pi_estimate)
}
# Perform the Monte Carlo simulation
pi_estimate <- estimate_pi(num_points)
# Number of random points to generate
num_points <- 10000000000
# Function to perform Monte Carlo simulation and estimate pi
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
for (i in 1:num_points) {
x <- runif(1, 0, 1)  # Generate a random x-coordinate between 0 and 1
y <- runif(1, 0, 1)  # Generate a random y-coordinate between 0 and 1
# Store the x and y values for plotting
x_values <- c(x_values, x)
y_values <- c(y_values, y)
# Check if the point (x, y) is inside the unit circle
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
}
# Estimate pi using the ratio of points inside the circle to total points
pi_estimate <- 4 * inside_circle / num_points
# Create a data frame for plotting
df <- data.frame(x = x_values, y = y_values)
# Create a ggplot scatter plot
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
# Print the ggplot
print(plot)
return(pi_estimate)
}
# Perform the Monte Carlo simulation
pi_estimate <- estimate_pi(num_points)
# Load the ggplot2, ggforce, and progress libraries
library(ggplot2)
library(ggforce)
library(progress)
# Number of random points to generate
num_points <- 1000000  # Change this to a very large number
# Function to perform Monte Carlo simulation and estimate pi
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)  # Generate a random x-coordinate between 0 and 1
y <- runif(1, 0, 1)  # Generate a random y-coordinate between 0 and 1
# Store the x and y values for plotting
x_values <- c(x_values, x)
y_values <- c(y_values, y)
# Check if the point (x, y) is inside the unit circle
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
# Update the progress bar
pb$tick()
}
# Estimate pi using the ratio of points inside the circle to total points
pi_estimate <- 4 * inside_circle / num_points
# Create a data frame for plotting
df <- data.frame(x = x_values, y = y_values)
# Create a ggplot scatter plot
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
# Print the ggplot
print(plot)
return(pi_estimate)
}
# Perform the Monte Carlo simulation
pi_estimate <- estimate_pi(num_points)
# Number of random points to generate
num_points <- 1000  # Change this to a very large number
# Function to perform Monte Carlo simulation and estimate pi
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)  # Generate a random x-coordinate between 0 and 1
y <- runif(1, 0, 1)  # Generate a random y-coordinate between 0 and 1
# Store the x and y values for plotting
x_values <- c(x_values, x)
y_values <- c(y_values, y)
# Check if the point (x, y) is inside the unit circle
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
# Update the progress bar
pb$tick()
}
# Estimate pi using the ratio of points inside the circle to total points
pi_estimate <- 4 * inside_circle / num_points
# Create a data frame for plotting
df <- data.frame(x = x_values, y = y_values)
# Create a ggplot scatter plot
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
# Print the ggplot
print(plot)
return(pi_estimate)
}
# Perform the Monte Carlo simulation
pi_estimate <- estimate_pi(num_points)
# Number of random points to generate
num_points <- 100000  # Change this to a very large number
# Function to perform Monte Carlo simulation and estimate pi
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)  # Generate a random x-coordinate between 0 and 1
y <- runif(1, 0, 1)  # Generate a random y-coordinate between 0 and 1
# Store the x and y values for plotting
x_values <- c(x_values, x)
y_values <- c(y_values, y)
# Check if the point (x, y) is inside the unit circle
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
# Update the progress bar
pb$tick()
}
# Estimate pi using the ratio of points inside the circle to total points
pi_estimate <- 4 * inside_circle / num_points
# Create a data frame for plotting
df <- data.frame(x = x_values, y = y_values)
# Create a ggplot scatter plot
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
# Print the ggplot
print(plot)
return(pi_estimate)
}
# Perform the Monte Carlo simulation
pi_estimate <- estimate_pi(num_points)
# Number of random points to generate
num_points <- 10000000000  # Change this to a very large number
# Function to perform Monte Carlo simulation and estimate pi
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)  # Generate a random x-coordinate between 0 and 1
y <- runif(1, 0, 1)  # Generate a random y-coordinate between 0 and 1
# Store the x and y values for plotting
x_values <- c(x_values, x)
y_values <- c(y_values, y)
# Check if the point (x, y) is inside the unit circle
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
# Update the progress bar
pb$tick()
}
# Estimate pi using the ratio of points inside the circle to total points
pi_estimate <- 4 * inside_circle / num_points
# Create a data frame for plotting
df <- data.frame(x = x_values, y = y_values)
# Create a ggplot scatter plot
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
# Print the ggplot
print(plot)
return(pi_estimate)
}
# Perform the Monte Carlo simulation
pi_estimate <- estimate_pi(num_points)
# Number of random points to generate
num_points <- 10000000  # Change this to a very large number
# Function to perform Monte Carlo simulation and estimate pi
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)  # Generate a random x-coordinate between 0 and 1
y <- runif(1, 0, 1)  # Generate a random y-coordinate between 0 and 1
# Store the x and y values for plotting
x_values <- c(x_values, x)
y_values <- c(y_values, y)
# Check if the point (x, y) is inside the unit circle
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
# Update the progress bar
pb$tick()
}
# Estimate pi using the ratio of points inside the circle to total points
pi_estimate <- 4 * inside_circle / num_points
# Create a data frame for plotting
df <- data.frame(x = x_values, y = y_values)
# Create a ggplot scatter plot
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
# Print the ggplot
print(plot)
return(pi_estimate)
}
# Perform the Monte Carlo simulation
pi_estimate <- estimate_pi(num_points)
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)
y <- runif(1, 0, 1)
x_values <- c(x_values, x)
y_values <- c(y_values, y)
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
pb$tick()
print(i)
}
pi_estimate <- 4 * inside_circle / num_points
df <- data.frame(x = x_values, y = y_values)
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
print(plot)
return(pi_estimate)
}
pi_estimate <- estimate_pi(num_points)
num_points <- 1000
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)
y <- runif(1, 0, 1)
x_values <- c(x_values, x)
y_values <- c(y_values, y)
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
pb$tick()
print(i)
}
pi_estimate <- 4 * inside_circle / num_points
df <- data.frame(x = x_values, y = y_values)
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
print(plot)
return(pi_estimate)
}
pi_estimate <- estimate_pi(num_points)
num_points <- 1000000
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)
y <- runif(1, 0, 1)
x_values <- c(x_values, x)
y_values <- c(y_values, y)
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
pb$tick()
print(i)
}
pi_estimate <- 4 * inside_circle / num_points
df <- data.frame(x = x_values, y = y_values)
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
print(plot)
return(pi_estimate)
}
pi_estimate <- estimate_pi(num_points)
num_points <- 1000
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)
y <- runif(1, 0, 1)
x_values <- c(x_values, x)
y_values <- c(y_values, y)
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
pb$tick()
print(i)
}
pi_estimate <- 4 * inside_circle / num_points
df <- data.frame(x = x_values, y = y_values)
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
print(plot)
return(pi_estimate)
}
pi_estimate <- estimate_pi(num_points)
num_points <- 100000
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)
y <- runif(1, 0, 1)
x_values <- c(x_values, x)
y_values <- c(y_values, y)
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
pb$tick()
print(i)
}
pi_estimate <- 4 * inside_circle / num_points
df <- data.frame(x = x_values, y = y_values)
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
print(plot)
return(pi_estimate)
}
pi_estimate <- estimate_pi(num_points)
num_points <- 1000000
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)
y <- runif(1, 0, 1)
x_values <- c(x_values, x)
y_values <- c(y_values, y)
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
pb$tick()
print(i)
}
pi_estimate <- 4 * inside_circle / num_points
df <- data.frame(x = x_values, y = y_values)
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
print(plot)
return(pi_estimate)
}
pi_estimate <- estimate_pi(num_points)
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("..")
setwd("data")
getwd()
setwd("data")
setwd("..")
setwd("data")
getwd()
getwd()
setwd("..")
setwd("data")
setwd("data")
getwd()
setwd("..")
getwd()
tinytex::install_tinytex()
library(tidyverse)
getwd()
library(tidyverse)
getwd()
cars <- read_csv("pakistan.csv")
cars
View(cars)
apply(X = cars, MARGIN = 2, FUN = function(col)
sum(is.na(col)))
cars <- na.omit(cars)
cor(x = cars$mileage, y = cars$price)
ggplot(cars, aes(x=mileage, y=price)) + geom_point()
