print(paste(i, "is a  large crew"))
}
}
#Q1
#Q2
Vector <- c(1L,2L,3L,4L,5L)
#Q3
twos <-c(seq(2,10,2))
#Q4
threes <- c(seq(3,15,3))
fours <- c(seq(4, 20, 4))
fives <- c(seq(5, 25, 5))
#Q6
TimesTable <- data.frame("one" = Vector, "two" = twos, "three" = threes, "four" = fours, "five" = fives)
#Q7
TimesTable
#Q8
sixes <- c(seq(6,36,6))
#Q9
TimesTable <-  rbind(TimesTable, "six" = sixes)
TimesTable
#Q10
TimesTable <- cbind(TimesTable, sixes)
TimesTable
#Q11
TimesTable[[6]][[5]]
TimesTable[[6,5]]
#Q12,13
DivideAndRound <- function(x,y)
{
result <- x/y
result <- round(result, 2)
print(result)
}
#Q14
DivideAndRound(8,3)
DivideAndRound(0,0)
#Q15
CaptainNames <- c("Lucas","Lee","MenSing")
#Q16
CrewCount <- c(7L, 3L, 4L)
#Q17
Ships <- data.frame("Captains" = CaptainNames, "SailorCount" = CrewCount)
#Q18
Ships
#Q19
Ships[1]
#Q20
Ships$Captains
#Q21
GaoShip <- list("Gao", 6L)
Ships <- rbind(Ships, GaoShip)
Ships
#Q22,23,24,25,26
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
print(paste(i, "is a large crew"))
}
else if (i <= 3)
{
crew <- i
print(paste(i, "is a medium crew"))
}
else
{
crew <- i
print(paste(i, "is a small crew"))
}
}
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(datasets)
library(RJSONIO)
diamonds?
a
diamonds
?diamonds
names(diamonds) <- names(diamonds) %>% str_to_title()
diamonds
View(diamonds)
apply(x=diamonds,MARGIN=2,FUN=funcation(col()), sum(is.na(col)))
apply(x=diamonds,MARGIN=2,FUN=function(col()), sum(is.na(col)))
apply(x=diamonds,MARGIN=2,FUN=function(col()),sum(is.na(col)))
diamonds <- diamonds %>% filter(X!=0 & Y!=0 & Z!=0)
diamonds
ggplot(diamonds, aes(y=Price,fill=Carats)) + geom_boxplot() + labs(title = "Diamonds") + facet_wrap(facets = vars(X,Y,Z,Carat,Depth,Table))
ggplot(diamonds, aes(y=Price,fill=Carat)) + geom_boxplot() + labs(title = "Diamonds") + facet_wrap(facets = vars(X,Y,Z,Carat,Depth,Table))
ggplot(diamonds, aes(x=X,y=Price,fill=Cut)) + geom_boxplot()
ggplot(diamonds, aes(x=X,y=Price,fill=Cut)) + geom_boxplot() + facet_wrap(facets = Cut)
ggplot(diamonds, aes(x=X,y=Price,fill=Cut)) + geom_boxplot() + facet_wrap(facets = Carat)
ggplot(diamonds, aes(x=X,y=Price,fill=Clarity)) + geom_boxplot()
ggplot(diamonds, aes(x=X,y=Price,fill=Color)) + geom_boxplot()
library(tidyverse)
library(ggplot2)
library(datasets)
library(RJSONIO)
diamonds
#Rename columns to use title case
names(diamonds) <- names(diamonds) %>% str_to_title()
diamonds
#check for NA values
apply(X=diamonds,MARGIN=2,FUN=function(col),sum(is.na(col)))
apply(X=diamonds,MARGIN=2,FUN=function(col)
sum(is.na(col)))
apply(X=diamonds,MARGIN=2,FUN=function(col) sum(is.na(col)))
quantile(x,0.75) + (1.5*IQR(x))
get_upper_fence <- function(x) {
quantile(x,0.75) + (1.5*IQR(x))
}
quantile(x,0.75) + (1.5*IQR(x))
get_upper_fence <- function(x) {
quantile(x,0.75) + (1.5*IQR(x))
}
quantile(x, 0.75) + (1.5 * IQR(x))
get_upper_fence <- function(x) {
quantile(x, 0.75) + (1.5 * IQR(x))
}
quantile(x, 0.75) + (1.5 * IQR(x))
get_upper_fence <- function(x) {
quantile(x, 0.75) + (1.5 * IQR(x))
}
get_lower_fence <- function(x) {
quantile(x, 0.25) - (1.5 * IQR(x))
}
get_upper_fence
get_upper_fence <- function(x) {
quantile(x, 0.75) + (1.5 * IQR(x))
}
get_lower_fence <- function(x) {
quantile(x, 0.25) - (1.5 * IQR(x))
}
diamond_long <- diamonds %>%
select_if(is.numeric) %>%
pivot_longer(cols = names(select_if(diamonds, is.numeric)),
names_to = "Variable",
values_to = "Value") %>%
group_by(Variable) %>%
mutate(UpperFence = get_upper_fence(Value),
LowerFence - get_lower_fence(Value))
ggplot(data = diamonds_long, aes(x = Value)) +
geom_density(aes(color = Variable)) +
geom_vline(aes(xintercept = UpperFence), color = "red") +
geom_vline(aes(xintercept = LowerFence), color = "red") +
facet_wrap(facets =  vars(Variable), scale = "free") +
guides(color = "none")
diamonds_long <- diamonds %>%
select_if(is.numeric) %>%
pivot_longer(cols = names(select_if(diamonds, is.numeric)),
names_to = "Variable",
values_to = "Value") %>%
group_by(Variable) %>%
mutate(UpperFence = get_upper_fence(Value),
LowerFence - get_lower_fence(Value))
ggplot(data = diamonds_long, aes(x = Value)) +
geom_density(aes(color = Variable)) +
geom_vline(aes(xintercept = UpperFence), color = "red") +
geom_vline(aes(xintercept = LowerFence), color = "red") +
facet_wrap(facets =  vars(Variable), scale = "free") +
guides(color = "none")
diamonds_long <- diamonds %>%
select_if(is.numeric) %>%
pivot_longer(cols = names(select_if(diamonds, is.numeric)),
names_to = "Variable",
values_to = "Value") %>%
group_by(Variable) %>%
mutate(UpperFence = get_upper_fence(Value),
LowerFence = get_lower_fence(Value))
ggplot(data = diamonds_long, aes(x = Value)) +
geom_density(aes(color = Variable)) +
geom_vline(aes(xintercept = UpperFence), color = "red") +
geom_vline(aes(xintercept = LowerFence), color = "red") +
facet_wrap(facets =  vars(Variable), scale = "free") +
guides(color = "none")
distance <- c(4.3, 1.4, 1.4, 0.6, 1.4, 6.2, 25.0, 6.6, 4.8, 5.3)
minutes <- c(19, 5 ,5 , 4, 5, 15, 26, 20, 15, 12)
cor(x=distance, y=minutes)
distance <- c(4.3, 1.4, 1.4, 0.6, 1.4, 6.2, 6.6, 4.8, 5.3)
minutes <- c(19, 5 ,5 , 4, 5, 15, 20, 15, 12)
cor(x=distance, y=minutes)
r_vals <- data.frame(X=c(1:100)) %>% as_tibble()
r_vals <- r_vals %>% rowwise() %>%
mutate(A_PerfectPos = X,
B_StrongPos = X + sample(-25:25, 1, replace = TRUE),
C_ModeratePos = X + sample(-50:50, 1, replace = TRUE),
D_WeakPos = X + sample(-125:125, 1, replace = TRUE),
E_Negligble = sample(-50:50, 1, replace = TRUE),
F_WeakNeg = - X + sample(-125:125, 1, replace =TRUE),
G_ModerateNeg = -X + sample(-50:50, 1, replace = TRUE),
H_StrongNeg = -X + sample(-25:25, 1, replace + TRUE),
I_PerfectNeg = -X)
r_vals <- r_vals %>% rowwise() %>%
mutate(A_PerfectPos = X,
B_StrongPos = X + sample(-25:25, 1, replace = TRUE),
C_ModeratePos = X + sample(-50:50, 1, replace = TRUE),
D_WeakPos = X + sample(-125:125, 1, replace = TRUE),
E_Negligble = sample(-50:50, 1, replace = TRUE),
F_WeakNeg = -X + sample(-125:125, 1, replace =TRUE),
G_ModerateNeg = -X + sample(-50:50, 1, replace = TRUE),
H_StrongNeg = -X + sample(-25:25, 1, replace + TRUE),
I_PerfectNeg = -X)
r_vals <- r_vals %>% rowwise() %>%
mutate(A_PerfectPos = X,
B_StrongPos = X + sample(-25:25, 1, replace = TRUE),
C_ModeratePos = X + sample(-50:50, 1, replace = TRUE),
D_WeakPos = X + sample(-125:125, 1, replace = TRUE),
E_Negligble = sample(-50:50, 1, replace = TRUE),
F_WeakNeg = -X + sample(-125:125, 1, replace =TRUE),
G_ModerateNeg = -X + sample(-50:50, 1, replace = TRUE),
H_StrongNeg = -X + sample(-25:25, 1, replace = TRUE),
I_PerfectNeg = -X)
r_vals <- r_vals %>% rowwise() %>%
mutate(A_PerfectPos = X,
B_StrongPos = X + sample(-25:25, 1, replace = TRUE),
C_ModeratePos = X + sample(-50:50, 1, replace = TRUE),
D_WeakPos = X + sample(-125:125, 1, replace = TRUE),
E_Negligble = sample(-50:50, 1, replace = TRUE),
F_WeakNeg = -X + sample(-125:125, 1, replace =TRUE),
G_ModerateNeg = -X + sample(-50:50, 1, replace = TRUE),
H_StrongNeg = -X + sample(-25:25, 1, replace = TRUE),
I_PerfectNeg = -X)
r_vals <- r_vals %>% rowwise() %>%
mutate(A_PerfectPos = X,
B_StrongPos = X + sample(-25:25, 1, replace = TRUE),
C_ModeratePos = X + sample(-50:50, 1, replace = TRUE),
D_WeakPos = X + sample(-125:125, 1, replace = TRUE),
E_Negligble = sample(-50:50, 1, replace = TRUE),
F_WeakNeg = -X + sample(-125:125, 1, replace =TRUE),
G_ModerateNeg = -X + sample(-50:50, 1, replace = TRUE),
H_StrongNeg = -X + sample(-25:25, 1, replace = TRUE),
I_PerfectNeg = -X)
ggplot(data = r_vals_long) +
geom_point(aes(x = X, y = Value)) +
facet_wra(facets = vars(Variable), scales = "free")
r_vals_long <- r_vals %>%
pivot_longer(cols = names(select(r_vals, -1)),
names_to = "Variable",
values_to = "Value")
ggplot(data = r_vals_long) +
geom_point(aes(x = X, y = Value)) +
facet_wra(facets = vars(Variable), scales = "free")
ggplot(data = r_vals_long) +
geom_point(aes(x = X, y = Value)) +
facet_wrap(facets = vars(Variable), scales = "free")
cor(x = diamonds$Price, y = diamonds$Carat)
cor(r_vals, r_vals$X)
cor(x = diamonds$Price, y = diamonds$Carat)
cor(diamonds$Price, select_if(diamonds, is.numeric))
select_if(diamonds, is.numeric) %>% cor() %>% round(3)
ggplot(diamonds, aes(x = carat, y = price)) + geom_point()
ggplot(diamonds, aes(x = Carat, y = Price)) + geom_point()
ggplot(diamonds, aes(x = Z, y = Price)) + geom_point() + xlim(2.25, 6)
gpplot(diamonds, aes(x = Z, y = Price)) + geom_point
ggplot(diamonds, aes(x = Z, y = Price)) + geom_point
ggplot(diamonds, aes(x = Z, y = Price)) + geom_point()
ggplot(diamonds, aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds, aes(x = Depth, y = Price)) + geom_point(alpha = .1)
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(50000), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(5000), aes(x = Depth, y = Price)) + geom_point(alpha = .1)
diamonds_split <- initial_split(diamonds, prop = 0.75)
install.packages("tidymodels")
library(tidymodels)
diamonds_split <- initial_split(diamonds, prop = 0.75)
train <- training(diamonds_split)
test <- testing(diamonds_split)
select_if(diamonds, is.numeric) %>% cor() %>% round(3)
train
test
get_upper_fence <- function(x){
quantile(x, 0.75) + (1.5 * IQR(x))
}
get_lower_fence <- function(x) {
quantile(x, 0.25) - (1.5 * IQR(x))
}
train <- train %>% filter_at(vars(Carat, Depth, Table, X, Y, Z),
all_vars(. > get_lower_fence(.) &
. < get_upper_fence(.)))
train
ggplot(data = train, aes(x = Z, y = Price)) + geom_point()
train <- train %>% filter(!Z < 2.25)
ggplot(data = train, aes(x = Z, y = Price)) + geom_point()
knitr::opts_chunk$set(echo = TRUE)
model <- lm(Length ~ Age, data = lobsters)
model
summary(model)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
Import libraries
```{r}
library(tidyverse)
library(tidyverse)
library(tidymodels)
Import Lobsters data
lobsters <- read_csv("Lobsters.csv") %>% as_tibble()
lobsters <- read_csv("Lobsters.csv") %>% as_tibble()
Create a plot
```{r}
ggplot(data = lobsters) + geom_point(aes(x = Age, y = Length))
ggplot(data = lobsters) + geom_point(aes(x = Age, y = Length))
Create a linear regression model
```{r}
model <- lm(Length ~ Age, data = lobsters)
model
summary(model)
summary(model)
```{r}
lobsters$sqrtLength <- lobsters$Length^0.5
model2 <- lm(sqrtLength ~ Age, data = lobsters)
model2
summary(model2)
summary(model2)
```{r}
lobsters$Length2 <- lobsters$Length^2
model3 <- lm(Length2 ~ Age, data = lobsters)
model3
summary(model3)
summary(model3)
```{r}
ggplot(lobsters) + geom_point(aes(x=predict(model), y=resid(model)))
ggplot(lobsters) + geom_point(aes(x=predict(model), y=resid(model)))
```{r}
ggplot(lobsters) + geom_point(aes(x=predict(model2), y=resid(model2)))
ggplot(lobsters) + geom_point(aes(x=predict(model2), y=resid(model2)))
```{r}
ggplot(lobsters) + geom_point(aes(x=predict(model3), y=resid(model3)))
getwd()
library(tidyverse)
library(tidymodels)
library(ggforce)
library(mctest)
library(olsrr)
library(jtools)
library(ggcorrplot)
library(yardstick)
library(car)
library(moments)
library(GGally)
library(psych)
library(fastDummies)
NHL <- read_csv("nhldraft.csv") %>% as_tibble()
NHL <- na.omit(NHL)
summary(NHL)
setwd("/Documents")
setwd("Documents")
setwd("GitHub")
setwd("Documents")
setwd("GitHub")
setwd("Advanced-Data-Science")
setwd("Gao")
setwd("Semester Exam")
getwd()
NHL <- read_csv("nhldraft.csv") %>% as_tibble()
NHL <- na.omit(NHL)
summary(NHL)
cor(NHL$Points, select_if(NHL, is.numeric))
NHL <- dummy_cols(NHL, select_columns = "Position", remove_first_dummy = TRUE)
knitr::opts_chunk$set(echo = TRUE)
model <- lm(Points ~ GamesPlayed + PlusMinus + PenaltyMinutes + Position_D + Position_F + Position_G + Position_LW + Position_RW + Position_W, data = NHL)
model
model <- lm(Points ~ GamesPlayed + PlusMinus + PenaltyMinutes + Position_D + Position_F + Position_G + Position_LW + Position_RW + Position_W, data = NHL)
model
standard_error <- sqrt(deviance(model)/df.residual(model))
standard_error
2*standard_error
plot(fitted(model),resid(model))
abline(h=2*standard_error, col = "blue")
abline(h=-2*standard_error, col = "blue")
abline(h=3*standard_error, col = "red")
abline(h=-3*standard_error, col = "red")
res_pot_outliers <- Travel %>% filter(2*standard_error <= abs(resid(model)) & abs(resid(model)) < 3*standard_error)
print(res_pot_outliers)
res_pot_outliers <- NHL %>% filter(2*standard_error <= abs(resid(model)) & abs(resid(model)) < 3*standard_error)
print(res_pot_outliers)
res_outliers <- NHL %>% filter(abs(resid(model)) >= 3*standard_error)
print(res_pot_outliers)
h <- 2*(4+1)/205
h
leverage<-hatvalues(model)
sort(round(leverage,4))
h <- 2*(10+1)/205
h
h <- 2*(4+1)/205
h <- 2*(4+1)/205
h <- 2*(4+1)/205
h <- 2*(4+1)/205
h <- 2*(4+1)/205
h
leverage<-hatvalues(model)
sort(round(leverage,4))
leverage_outliers <- NHL %>% filter(leverage > h)
leverage_outliers
t <- qt(df =  2066 - 4 - 2, 0.95)
t
jackknife <- rstudent(model)
sort(round(jackknife, 4))
jackknife_outliers <- Travel %>% filter(jackknife > t | jackknife < -t)
jackknife_outliers <- NHL %>% filter(jackknife > t | jackknife < -t)
jackknife_outliers
cookCV <- 4/2206
cookCV
cook <- cooks.distance(model)
sort(round(cook, 4))
cook_outliers <- Travel %>% filter(cook > cookCV)
cook_outliers <- NHL %>% filter(cook > cookCV)
cook_outliers
ggplot(NHL, aes(x = fitted(model), y = jackknife)) + geom_point()+ geom_hline(yintercept = t, col = "purple") + geom_hline(yintercept = -t, col = "purple")
qqnorm(resid(model))
qqline(resid(model), col = "red", lwd = 2)
qqPlot(resid(model))
skewness(jackknife)
kurtosis(jackknife)
skewness(jackknife)
kurtosis(jackknife)
ols_vif_tol(model)
eigprop(model)
skewness(jackknife)
kurtosis(jackknife)
skewness(jackknife)
kurtosis(jackknife)
ols_vif_tol(model)
eigprop(model)
ols_step_forward_p(model)
ols_step_backward_p(model)
ols_step_both_p(model)
pairs.panels(NHL)
View(NHL)
NHL2 <- select(NHL,c(GamesPlayed + PlusMinus + PenaltyMinutes))
NHL2
NHL2 <- select(NHL,c(GamesPlayed + PlusMinus + PenaltyMinutes))
NHL2 <- select(NHL,c(GamesPlayed, PlusMinus, PenaltyMinutes))
NHL2
pairs.panels(NHL2)
ols_step_forward_p(model)
ols_step_backward_p(model)
ols_step_both_p(model)
View(NHL)
NHL <- read_csv("trains.csv") %>% as_tibble()
NHL <- read_csv("train.csv") %>% as_tibble()
NHL <- na.omit(NHL)
summary(NHL)
cor(NHL$Points, select_if(NHL, is.numeric))
cor(NHL$Salary, select_if(NHL, is.numeric))
NHL <- dummy_cols(NHL, select_columns = "Position", remove_first_dummy = TRUE)
View(NHL)
NHL <- dummy_cols(NHL, select_columns = "HA", remove_first_dummy = TRUE)
View(NHL)
NHL <- read_csv("train.csv") %>% as_tibble()
NHL <- na.omit(NHL)
summary(NHL)
cor(NHL$Salary, select_if(NHL, is.numeric))
NHL <- dummy_cols(NHL, select_columns = "Hand", remove_first_dummy = TRUE)
View(NHL)
model <- lm(Salary ~ GP + GS + +/--, data = NHL)
NHL <- read_csv("train.csv") %>% as_tibble()
NHL <- na.omit(NHL)
summary(NHL)
cor(NHL$Salary, select_if(NHL, is.numeric))
NHL <- dummy_cols(NHL, select_columns = "Hand", remove_first_dummy = TRUE)
View(NHL)
NHL <- dummy_cols(NHL, select_columns = "Hand", remove_first_dummy = TRUE)
cor(NHL$Salary, select_if(NHL, is.numeric))
NHL <- dummy_cols(NHL, select_columns = "Hand", remove_first_dummy = TRUE)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + 1G + iHDf + NZF + OSA + OSF + , data = NHL)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + NZF + OSA + OSF + , data = NHL)
NHL <- read_csv("train.csv") %>% as_tibble()
NHL <- na.omit(NHL)
summary(NHL)
cor(NHL$Salary, select_if(NHL, is.numeric))
NHL <- dummy_cols(NHL, select_columns = "Position", remove_first_dummy = TRUE)
NHL <- read_csv("train.csv") %>% as_tibble()
NHL <- na.omit(NHL)
summary(NHL)
cor(NHL$Salary, select_if(NHL, is.numeric))
NHL <- dummy_cols(NHL, select_columns = "Position", remove_first_dummy = TRUE)
View(NHL)
NHL <- read_csv("train.csv") %>% as_tibble()
NHL <- na.omit(NHL)
summary(NHL)
cor(NHL$Salary, select_if(NHL, is.numeric))
NHL <- dummy_cols(NHL, select_columns = "Position", remove_first_dummy = TRUE)
View(NHL)
View(NHL)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + NZF + OSA + OSF + Position_C/D + Position_C/LW + Position_C/RW + Position_C/LW/RW + Position_D + Position_LW + Position_LW/RW + Position_RW), data = NHL)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + NZF + OSA + OSF + Position_C/D + Position_C/LW + Position_C/RW + Position_C/LW/RW + Position_D + Position_LW + Position_LW/RW + Position_RW, data = NHL)
cor(NHL$Salary, select_if(NHL, is.numeric))
NHL <- dummy_cols(NHL, select_columns = "Position", remove_first_dummy = TRUE)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + NZF + OSA + OSF + Position_C/D + Position_C/LW + Position_C/RW + Position_C/LW/RW + Position_D + Position_LW + Position_LW/RW + Position_RW, data = NHL)
NHL <- read_csv("train.csv") %>% as_tibble()
NHL <- na.omit(NHL)
summary(NHL)
cor(NHL$Salary, select_if(NHL, is.numeric))
NHL <- dummy_cols(NHL, select_columns = "Position", remove_first_dummy = TRUE)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + NZF + OSA + OSF + Position_C/D + Position_C/LW + Position_C/RW + Position_C/LW/RW + Position_D + Position_LW + Position_LW/RW + Position_RW, data = NHL)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + OSA + OSF + Position_C/D + Position_C/LW + Position_C/RW + Position_C/LW/RW + Position_D + Position_LW + Position_LW/RW + Position_RW, data = NHL)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + OSF + Position_C/D + Position_C/LW + Position_C/RW + Position_C/LW/RW + Position_D + Position_LW + Position_LW/RW + Position_RW, data = NHL)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + Position_C/D + Position_C/LW + Position_C/RW + Position_C/LW/RW + Position_D + Position_LW + Position_LW/RW + Position_RW, data = NHL)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + nzFOL + nzFOW Position_C/D + Position_C/LW + Position_C/RW + Position_C/LW/RW + Position_D + Position_LW + Position_LW/RW + Position_RW, data = NHL)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + nzFOL + nzFOW + Position_C/D + Position_C/LW + Position_C/RW + Position_C/LW/RW + Position_D + Position_LW + Position_LW/RW + Position_RW, data = NHL)
model <- lm(Salary ~ GP + GS + PM + PIM + Wt + iHDf + nzFOL + nzFOW + Position_CD + Position_CLW + Position_CRW + Position_CLWRW + Position_D + Position_LW + Position_LWRW + Position_RW, data = NHL)
model
