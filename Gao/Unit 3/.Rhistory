crew <- i
paste(crew, "is a large crew")
}
}
CrewCount
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
paste(crew, "is a large crew")
}
}
CrewCount
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
paste(crew, "is a large crew")
}
}
CrewCount
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
paste(crew, "is a large crew")
}
}
CrewCount
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
paste(crew, "is a large crew")
}
}
CrewCount
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
crew
paste(crew, "is a large crew")
}
}
CrewCount
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
crew
paste(crew, "is a large crew")
}
}
CrewCount
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
crew
paste(crew, "is a large crew")
}
}
#Q22,23,24
CrewCount
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
crew
}
}
CrewCount
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
print(paste(i, "is a  large crew"))
}
}
#Q1
#Q2
Vector <- c(1L,2L,3L,4L,5L)
#Q3
twos <-c(seq(2,10,2))
#Q4
threes <- c(seq(3,15,3))
fours <- c(seq(4, 20, 4))
fives <- c(seq(5, 25, 5))
#Q6
TimesTable <- data.frame("one" = Vector, "two" = twos, "three" = threes, "four" = fours, "five" = fives)
#Q7
TimesTable
#Q8
sixes <- c(seq(6,36,6))
#Q9
TimesTable <-  rbind(TimesTable, "six" = sixes)
TimesTable
#Q10
TimesTable <- cbind(TimesTable, sixes)
TimesTable
#Q11
TimesTable[[6]][[5]]
TimesTable[[6,5]]
#Q12,13
DivideAndRound <- function(x,y)
{
result <- x/y
result <- round(result, 2)
print(result)
}
#Q14
DivideAndRound(8,3)
DivideAndRound(0,0)
#Q15
CaptainNames <- c("Lucas","Lee","MenSing")
#Q16
CrewCount <- c(7L, 3L, 4L)
#Q17
Ships <- data.frame("Captains" = CaptainNames, "SailorCount" = CrewCount)
#Q18
Ships
#Q19
Ships[1]
#Q20
Ships$Captains
#Q21
GaoShip <- list("Gao", 6L)
Ships <- rbind(Ships, GaoShip)
Ships
#Q22,23,24,25,26
for (i in CrewCount) {
if(i >= 5)
{
crew <- i
print(paste(i, "is a large crew"))
}
else if (i <= 3)
{
crew <- i
print(paste(i, "is a medium crew"))
}
else
{
crew <- i
print(paste(i, "is a small crew"))
}
}
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(datasets)
library(RJSONIO)
diamonds?
a
diamonds
?diamonds
names(diamonds) <- names(diamonds) %>% str_to_title()
diamonds
View(diamonds)
apply(x=diamonds,MARGIN=2,FUN=funcation(col()), sum(is.na(col)))
apply(x=diamonds,MARGIN=2,FUN=function(col()), sum(is.na(col)))
apply(x=diamonds,MARGIN=2,FUN=function(col()),sum(is.na(col)))
diamonds <- diamonds %>% filter(X!=0 & Y!=0 & Z!=0)
diamonds
ggplot(diamonds, aes(y=Price,fill=Carats)) + geom_boxplot() + labs(title = "Diamonds") + facet_wrap(facets = vars(X,Y,Z,Carat,Depth,Table))
ggplot(diamonds, aes(y=Price,fill=Carat)) + geom_boxplot() + labs(title = "Diamonds") + facet_wrap(facets = vars(X,Y,Z,Carat,Depth,Table))
ggplot(diamonds, aes(x=X,y=Price,fill=Cut)) + geom_boxplot()
ggplot(diamonds, aes(x=X,y=Price,fill=Cut)) + geom_boxplot() + facet_wrap(facets = Cut)
ggplot(diamonds, aes(x=X,y=Price,fill=Cut)) + geom_boxplot() + facet_wrap(facets = Carat)
ggplot(diamonds, aes(x=X,y=Price,fill=Clarity)) + geom_boxplot()
ggplot(diamonds, aes(x=X,y=Price,fill=Color)) + geom_boxplot()
library(tidyverse)
library(ggplot2)
library(datasets)
library(RJSONIO)
diamonds
#Rename columns to use title case
names(diamonds) <- names(diamonds) %>% str_to_title()
diamonds
#check for NA values
apply(X=diamonds,MARGIN=2,FUN=function(col),sum(is.na(col)))
apply(X=diamonds,MARGIN=2,FUN=function(col)
sum(is.na(col)))
apply(X=diamonds,MARGIN=2,FUN=function(col) sum(is.na(col)))
quantile(x,0.75) + (1.5*IQR(x))
get_upper_fence <- function(x) {
quantile(x,0.75) + (1.5*IQR(x))
}
quantile(x,0.75) + (1.5*IQR(x))
get_upper_fence <- function(x) {
quantile(x,0.75) + (1.5*IQR(x))
}
quantile(x, 0.75) + (1.5 * IQR(x))
get_upper_fence <- function(x) {
quantile(x, 0.75) + (1.5 * IQR(x))
}
quantile(x, 0.75) + (1.5 * IQR(x))
get_upper_fence <- function(x) {
quantile(x, 0.75) + (1.5 * IQR(x))
}
get_lower_fence <- function(x) {
quantile(x, 0.25) - (1.5 * IQR(x))
}
get_upper_fence
get_upper_fence <- function(x) {
quantile(x, 0.75) + (1.5 * IQR(x))
}
get_lower_fence <- function(x) {
quantile(x, 0.25) - (1.5 * IQR(x))
}
diamond_long <- diamonds %>%
select_if(is.numeric) %>%
pivot_longer(cols = names(select_if(diamonds, is.numeric)),
names_to = "Variable",
values_to = "Value") %>%
group_by(Variable) %>%
mutate(UpperFence = get_upper_fence(Value),
LowerFence - get_lower_fence(Value))
ggplot(data = diamonds_long, aes(x = Value)) +
geom_density(aes(color = Variable)) +
geom_vline(aes(xintercept = UpperFence), color = "red") +
geom_vline(aes(xintercept = LowerFence), color = "red") +
facet_wrap(facets =  vars(Variable), scale = "free") +
guides(color = "none")
diamonds_long <- diamonds %>%
select_if(is.numeric) %>%
pivot_longer(cols = names(select_if(diamonds, is.numeric)),
names_to = "Variable",
values_to = "Value") %>%
group_by(Variable) %>%
mutate(UpperFence = get_upper_fence(Value),
LowerFence - get_lower_fence(Value))
ggplot(data = diamonds_long, aes(x = Value)) +
geom_density(aes(color = Variable)) +
geom_vline(aes(xintercept = UpperFence), color = "red") +
geom_vline(aes(xintercept = LowerFence), color = "red") +
facet_wrap(facets =  vars(Variable), scale = "free") +
guides(color = "none")
diamonds_long <- diamonds %>%
select_if(is.numeric) %>%
pivot_longer(cols = names(select_if(diamonds, is.numeric)),
names_to = "Variable",
values_to = "Value") %>%
group_by(Variable) %>%
mutate(UpperFence = get_upper_fence(Value),
LowerFence = get_lower_fence(Value))
ggplot(data = diamonds_long, aes(x = Value)) +
geom_density(aes(color = Variable)) +
geom_vline(aes(xintercept = UpperFence), color = "red") +
geom_vline(aes(xintercept = LowerFence), color = "red") +
facet_wrap(facets =  vars(Variable), scale = "free") +
guides(color = "none")
distance <- c(4.3, 1.4, 1.4, 0.6, 1.4, 6.2, 25.0, 6.6, 4.8, 5.3)
minutes <- c(19, 5 ,5 , 4, 5, 15, 26, 20, 15, 12)
cor(x=distance, y=minutes)
distance <- c(4.3, 1.4, 1.4, 0.6, 1.4, 6.2, 6.6, 4.8, 5.3)
minutes <- c(19, 5 ,5 , 4, 5, 15, 20, 15, 12)
cor(x=distance, y=minutes)
r_vals <- data.frame(X=c(1:100)) %>% as_tibble()
r_vals <- r_vals %>% rowwise() %>%
mutate(A_PerfectPos = X,
B_StrongPos = X + sample(-25:25, 1, replace = TRUE),
C_ModeratePos = X + sample(-50:50, 1, replace = TRUE),
D_WeakPos = X + sample(-125:125, 1, replace = TRUE),
E_Negligble = sample(-50:50, 1, replace = TRUE),
F_WeakNeg = - X + sample(-125:125, 1, replace =TRUE),
G_ModerateNeg = -X + sample(-50:50, 1, replace = TRUE),
H_StrongNeg = -X + sample(-25:25, 1, replace + TRUE),
I_PerfectNeg = -X)
r_vals <- r_vals %>% rowwise() %>%
mutate(A_PerfectPos = X,
B_StrongPos = X + sample(-25:25, 1, replace = TRUE),
C_ModeratePos = X + sample(-50:50, 1, replace = TRUE),
D_WeakPos = X + sample(-125:125, 1, replace = TRUE),
E_Negligble = sample(-50:50, 1, replace = TRUE),
F_WeakNeg = -X + sample(-125:125, 1, replace =TRUE),
G_ModerateNeg = -X + sample(-50:50, 1, replace = TRUE),
H_StrongNeg = -X + sample(-25:25, 1, replace + TRUE),
I_PerfectNeg = -X)
r_vals <- r_vals %>% rowwise() %>%
mutate(A_PerfectPos = X,
B_StrongPos = X + sample(-25:25, 1, replace = TRUE),
C_ModeratePos = X + sample(-50:50, 1, replace = TRUE),
D_WeakPos = X + sample(-125:125, 1, replace = TRUE),
E_Negligble = sample(-50:50, 1, replace = TRUE),
F_WeakNeg = -X + sample(-125:125, 1, replace =TRUE),
G_ModerateNeg = -X + sample(-50:50, 1, replace = TRUE),
H_StrongNeg = -X + sample(-25:25, 1, replace = TRUE),
I_PerfectNeg = -X)
r_vals <- r_vals %>% rowwise() %>%
mutate(A_PerfectPos = X,
B_StrongPos = X + sample(-25:25, 1, replace = TRUE),
C_ModeratePos = X + sample(-50:50, 1, replace = TRUE),
D_WeakPos = X + sample(-125:125, 1, replace = TRUE),
E_Negligble = sample(-50:50, 1, replace = TRUE),
F_WeakNeg = -X + sample(-125:125, 1, replace =TRUE),
G_ModerateNeg = -X + sample(-50:50, 1, replace = TRUE),
H_StrongNeg = -X + sample(-25:25, 1, replace = TRUE),
I_PerfectNeg = -X)
r_vals <- r_vals %>% rowwise() %>%
mutate(A_PerfectPos = X,
B_StrongPos = X + sample(-25:25, 1, replace = TRUE),
C_ModeratePos = X + sample(-50:50, 1, replace = TRUE),
D_WeakPos = X + sample(-125:125, 1, replace = TRUE),
E_Negligble = sample(-50:50, 1, replace = TRUE),
F_WeakNeg = -X + sample(-125:125, 1, replace =TRUE),
G_ModerateNeg = -X + sample(-50:50, 1, replace = TRUE),
H_StrongNeg = -X + sample(-25:25, 1, replace = TRUE),
I_PerfectNeg = -X)
ggplot(data = r_vals_long) +
geom_point(aes(x = X, y = Value)) +
facet_wra(facets = vars(Variable), scales = "free")
r_vals_long <- r_vals %>%
pivot_longer(cols = names(select(r_vals, -1)),
names_to = "Variable",
values_to = "Value")
ggplot(data = r_vals_long) +
geom_point(aes(x = X, y = Value)) +
facet_wra(facets = vars(Variable), scales = "free")
ggplot(data = r_vals_long) +
geom_point(aes(x = X, y = Value)) +
facet_wrap(facets = vars(Variable), scales = "free")
cor(x = diamonds$Price, y = diamonds$Carat)
cor(r_vals, r_vals$X)
cor(x = diamonds$Price, y = diamonds$Carat)
cor(diamonds$Price, select_if(diamonds, is.numeric))
select_if(diamonds, is.numeric) %>% cor() %>% round(3)
ggplot(diamonds, aes(x = carat, y = price)) + geom_point()
ggplot(diamonds, aes(x = Carat, y = Price)) + geom_point()
ggplot(diamonds, aes(x = Z, y = Price)) + geom_point() + xlim(2.25, 6)
gpplot(diamonds, aes(x = Z, y = Price)) + geom_point
ggplot(diamonds, aes(x = Z, y = Price)) + geom_point
ggplot(diamonds, aes(x = Z, y = Price)) + geom_point()
ggplot(diamonds, aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds, aes(x = Depth, y = Price)) + geom_point(alpha = .1)
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(500), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(50000), aes(x = Depth, y = Price)) + geom_point()
ggplot(diamonds %>% sample_n(5000), aes(x = Depth, y = Price)) + geom_point(alpha = .1)
diamonds_split <- initial_split(diamonds, prop = 0.75)
install.packages("tidymodels")
library(tidymodels)
diamonds_split <- initial_split(diamonds, prop = 0.75)
train <- training(diamonds_split)
test <- testing(diamonds_split)
select_if(diamonds, is.numeric) %>% cor() %>% round(3)
train
test
get_upper_fence <- function(x){
quantile(x, 0.75) + (1.5 * IQR(x))
}
get_lower_fence <- function(x) {
quantile(x, 0.25) - (1.5 * IQR(x))
}
train <- train %>% filter_at(vars(Carat, Depth, Table, X, Y, Z),
all_vars(. > get_lower_fence(.) &
. < get_upper_fence(.)))
train
ggplot(data = train, aes(x = Z, y = Price)) + geom_point()
train <- train %>% filter(!Z < 2.25)
ggplot(data = train, aes(x = Z, y = Price)) + geom_point()
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd(..)
setwd("..")
getwd
getwd()
setwd("andrewgao/Documents/GitHub/Advanced-Data-Science/Gao/Unit 3")
getwd()
NBA <- read_csv("NBA.csv") %>% as_tibble()
library(tidyverse)
library(tidymodels)
NBA <- read_csv("NBA.csv") %>% as_tibble()
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
getwd()
NBA <- read_csv("NBA.csv") %>% as_tibble()
getwd()
NBA <- read_csv("NBA.csv") %>% as_tibble()
View(diamonds)
ggplot(NBA, x = GP, y = PTS)
plot(NBA, x = GP, y = PTS)
plot(x = GP, y = PTS)
plot(GP,PTS)
plot?
a
plot(GP, PTS)
ggplot(NBA, x = GP, y = PTS) + geom_point()
ggplot(NBA) + geom_point(aes(x = GP, y = PTS))
model <- lm(PTS ~ GP, data = NBA)
model <- lm(PTS ~ GP, data = NBA)
mode
model
cor(NBA$GP, NBA$PTS)
(cor(NBA$GP, NBA$PTS))^2
Approximately 29.55% of the variability in the mean points per game can be explained by this lienar model containing games played and mean points per game.
summary(model)
num_points <- 100000
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)
y <- runif(1, 0, 1)
x_values <- c(x_values, x)
y_values <- c(y_values, y)
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
pb$tick()
print(i)
}
pi_estimate <- 4 * inside_circle / num_points
df <- data.frame(x = x_values, y = y_values)
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
print(plot)
return(pi_estimate)
}
pi_estimate <- estimate_pi(num_points)
library(ggplot2)
library(ggforce)
library(progress)
num_points <- 100000
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)
y <- runif(1, 0, 1)
x_values <- c(x_values, x)
y_values <- c(y_values, y)
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
pb$tick()
print(i)
}
pi_estimate <- 4 * inside_circle / num_points
df <- data.frame(x = x_values, y = y_values)
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
print(plot)
return(pi_estimate)
}
pi_estimate <- estimate_pi(num_points)
num_points <- 500000
estimate_pi <- function(num_points) {
inside_circle <- 0
x_values <- c()
y_values <- c()
pb <- progress_bar$new(
format = "[:bar] :percent ETA: :eta",
total = num_points,
clear = FALSE
)
for (i in 1:num_points) {
x <- runif(1, 0, 1)
y <- runif(1, 0, 1)
x_values <- c(x_values, x)
y_values <- c(y_values, y)
if (x^2 + y^2 <= 1) {
inside_circle <- inside_circle + 1
}
pb$tick()
print(i)
}
pi_estimate <- 4 * inside_circle / num_points
df <- data.frame(x = x_values, y = y_values)
plot <- ggplot(df, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside"))) +
scale_color_manual(values = c("Inside" = "blue", "Outside" = "red")) +
theme_minimal() +
ggtitle(paste("Estimated Pi =", pi_estimate))
print(plot)
return(pi_estimate)
}
pi_estimate <- estimate_pi(num_points)
ggplot(NBA) + geom_point(aes(x = GP, y = resid(model)))
